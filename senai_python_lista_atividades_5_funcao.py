# -*- coding: utf-8 -*-
"""SENAI-Python-Lista-Atividades-5-FUNCAO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RrT-rgiT4aeUji2cBRhdqBFSWD9lrrJr

## 1. Crie uma funcao
"""

def tabuada(n):
  '''
  Apresenta a
  taboada do inteiro n,
  onde 1 <= n <= 9.
  '''
  print(f'Tabuada do {n}')
  print('----------')
  i = 0
  for i in range(0, 11):
    print(f'{i} x {n} = {n * i}')

help(tabuada)
tabuada(7)

"""## 2. Implemente uma função que receba um valor n inteiro e imprima até a n-ésima linha da seguinte forma:"""

def questao2(n):

  for i in range(n+1):
    for num in range(i):
      print(f"{i}", end=" ")
    print()

questao2(5)

"""## 3. Implemente uma função que receba um valor n inteiro e imprima até a n-ésima linha da seguinte forma:"""

def questao3(n):
  """
  função que receba um valor n inteiro e imprima até a n-ésima linha da
  seguinte forma:
  """
  for i in range(n+1):
    for u in range(i):
      print(f"{u+1}", end=" ")
    print()

questao3(5)

"""## 4. Implemente uma função que receba um valor em segundos e imprima o correspondente em horas, minutos e segundos. Por exemplo, se a função receber como argumento 4814, imprimirá 1 hora(s) 20 minuto(s) e 14 segundo(s)."""

def seg2hr(n):
  horas = n / 3600
  minutos = n % 3600 / 60
  segundos = n % 60
  print(f'{n} segundos, sao: {horas:.0f}h {minutos:.0f}m {segundos}s')

seg2hr(4814)

"""## 5. Implemente uma função que retorna True se o argumento de entrada for um número natural primo e False caso contrário"""

def verifPrimo(n):
 return True if n > 0 and n % 2 == 1 and int(n) == n or n == 2 else False

verifPrimo(7)

"""## 6. Implemente uma função que retorne a quantidade de dígitos de um determinado número natural passado como argumento. Por exemplo, ao chamar a função com o número 2131, ela deverá retornar 4."""

def contarNumNatural(n):
  res = list(map(int, str(n)))
  print(len(res))
contarNumNatural(2131)

"""## 7. Implemente a função todos_iguais (sequencia) que retorna True se todos os elementos de sequencia forem iguais, e retorna False caso contrário."""

def todos_iguais(sequencia):
  if len(set(sequencia)) == 1:
    return True
  else:
    return False

todos_iguais({1,1,1,1})

"""## 8. Implemente a função todos_diferentes(sequencia) que retorna True se todos os elementos de sequencia forem diferentes entre si, e retorna False caso contrário, isto é, pelos"""

def todos_diferentes(sequencia):
  if len(set(sequencia)) != 1:
    return True
  else:
    return False

todos_diferentes({2,3,1,1})

"""9. Implemente uma função que recebe como argumentos um número n e uma lista de números, indice_elemento(n, lista). A função retornará o índice da primeira ocorrênia do número na lista e -1 se o número não estiver na lista. Obs: em Python, índices de listas, arrays, etc. começam em 0"""

def indice_elemento(n, lista):
  i = 0
  for num in lista:
    if num == n:
      return i
    i += 1
  return -1

indice_elemento(5, [1, 4, 5, 8, 10])

"""10. Implemente uma função que recebe um número n e retorna a menor potência de 2 maior ou igual a n. Por exemplo, pot2(14) retornará 16, pot2(42) retornará 64."""

def pot2(n):
  result = 1
  while result < n:
    result *= 2
  return result

pot2(42)

"""## 11. Implemente uma funçao que dado um número natural maior do que 1, decomponha esse número em fatores primos. Por exemplo, se o argumento de entrada for 36, a saída deverá ser [2, 2, 3, 3], porque 2 × 2 × 3 × 3 = 36."""

def decompoePrimo(num):
  listaPrimos = []

  for i in range(2,num+1):
    while num%i == 0:
      listaPrimos.append(i)
      num /= i
  return listaPrimos

decompoePrimo(36)

"""## 12. Implemente a função maiorN (lista, N) que recebe uma lista de números quaisquer, um valor N, 1 <= N <= len(lista), e retorna o Nésimo maior valor na lista de números. Por exemplo, se n for 1, retorna o maior valor na lista, se n for 2, retorna o segundo maior valor na lista, etc. Exemplo:

lista [5, -1, 7, 0, -3, 9]

N = 2

print(f'Em {lista} o {N}o. maior valor é {maiorN (lista, N)}')
"""

lista = [5, -1, 7, 0, -3, 9]

def maiorN(lista, N):
  lista.sort()
  N = lista[-1 * N]

  print(f'Em {lista} o {N}o. maior valor é {maiorN (lista, N)}')

maiorN(lista, 2)

lista.sort()
print(lista)